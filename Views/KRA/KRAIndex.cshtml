@model AddTaskViewModel
<head>
    <style>
        h3 {
            margin-bottom: 10px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }

        thead {
            background-color: #d9e8fb;
        }



        input, select {
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .tabs {
            display: flex;
            margin-bottom: 20px;
        }

        .tab {
            padding: 10px 20px;
            background-color: #f6f8fa;
            border: 1px solid #ccc;
            cursor: pointer;
            font-weight: bold;
            color: #333;
            margin-left: 5%;
        }

            .tab.active {
                background-color: #3c6eb;
                /* border-top: 2px solid #8CBAFF;*/
            }

        .tab-content {
            background-color: #ffffff;
            border: 1px solid #c3cfe6;
            padding: 20px;
            border-radius: 4px;
        }

        .form-group {
            margin-bottom: 15px;
        }



        input, select, textarea, button {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }





        .table-container {
            margin-top: 20px;
            margin-bottom: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: justify;
        }

        th {
            background-color: #e0e7ff;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

            .form-actions button {
                width: auto;
            }

        .toggle-group {
            display: flex;
            gap: 10px;
            align-items: center;
        }

            .toggle-group input {
                width: auto;
            }



        .form-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            flex: 1; /* Adjusts width evenly */
        }

        .toggle-group {
            display: flex;
            gap: 4x.5rem;
            align-items: center;
        }




        .col-md-5 {
            width: 75.666667%;
        }

        .containerOne {
            width: 1227px !important;
            background-color: aliceblue;
        }

        .form-control {
            border-radius: 19px;
        }

        .form-group textarea {
            width: 100%;
            height: 93px;
            padding: 18px;
            border: 1px solid #e5e6e7;
            outline: none;
            line-height: 31px;
        }

        .btn-primary.active, .btn-primary:active, .open > .dropdown-toggle.btn-primary {
            color: #000;
            background-color: #8CBAFF;
            border-color: #999;
        }
    </style>
</head>
<body>
    <div class="tabs">
        <a asp-action="KRAIndex" asp-controller="Kra" class="tab  btn btn-primary">KRA Generation</a>
        <a asp-action="Krareport" asp-controller="Kra" class="tab active btn btn-primary">KRAReport</a>
    </div>

    <div class="containerOne my-5">
        <form id="kraForm">
            <h2 class="form-title">KRA Generate</h2>
            <div class="row">
                <div class="col-12 col-md-4">
                    <div class="form-group">
                        <label for="kraName">KRA Name</label>
                        <input type="text" class="form-control" id="kraName" name="KraName" placeholder="Enter name of KRA" required>
                    </div>
                </div>
                <div class="col-12 col-md-4">
                    <div class="form-group">
                        <label for="quarter">Quarter</label>
                        <select id="quarter" name="Quarter" class="form-control" required>
                            <option value="">Select Quarter</option>
                            <option value="1">Q1</option>
                            <option value="2">Q2</option>
                            <option value="3">Q3</option>
                            <option value="4">Q4</option>
                        </select>
                    </div>
                </div>
                <div class="form-row priority-row">
                    <div class="col-12 col-md-5" style="margin-top: 4%;">
                        <label>Do you want to keep target?</label>
                        <div class="priority-options">
                            <div class="toggle-group">
                                <label><input type="radio" name="KeepTarget" value="true" checked> Yes</label>
                                <label><input type="radio" name="KeepTarget" value="false"> No</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-8">
                    <div class="form-group">
                        <label for="kraDescription">KRA Description</label>
                        <textarea id="kraDescription" name="kraDescription" rows="3" class="form-control" placeholder="Add KRA description"></textarea>
                    </div>
                </div>
                <div class="col-12 col-md-4">
                    <div class="form-group">
                        <button type="button" class="btn btn-primary" id="addDescription" style="width: fit-content;margin-top: 15%;">+ Add</button>
                    </div>
                </div>
            </div>

            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Sr. No</th>
                            <th>KRA Description</th>
                        </tr>
                    </thead>
                    <tbody id="descriptionTable">
                        <!-- Dynamically added rows go here -->
                    </tbody>
                </table>
            </div>

            <input type="hidden" id="kraDescriptions" name="KraDescriptions" />

            <div class="form-actions" style="display: flex; justify-content: center;">
                <button type="button" class="btn btn-primary" id="generateKRA">Generate KRA</button>
                <button type="button" class="btn btn-secondary">Cancel</button>
            </div>
        </form>


    </div>


    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const descriptionTable = document.getElementById("descriptionTable");
            const kraDescriptionsInput = document.getElementById("kraDescriptions");
            const addDescriptionButton = document.getElementById("addDescription");
            const generateKRAButton = document.getElementById("generateKRA");

            let descriptionCount = 0;

            // Add description to table
            addDescriptionButton.addEventListener("click", function () {
                const kraDescription = document.getElementById('kraDescription').value.trim();

                if (kraDescription === '') {
                    alert('Please enter a description.');
                    return;
                }

                // Add the description to the table
                descriptionCount++;
                const row = document.createElement("tr");
                row.innerHTML = `
                                <td>${descriptionCount}</td>
                                <td>${kraDescription}</td>
                            `;
                descriptionTable.appendChild(row);

                // Update the hidden input with all descriptions
                const descriptions = Array.from(descriptionTable.querySelectorAll("tr td:nth-child(2)"))
                    .map(td => td.textContent);
                alert(descriptions);
                kraDescriptionsInput.value = JSON.stringify(descriptions);
                console.log("Updated hidden input value:", kraDescriptionsInput.value);

                // Clear the input field
                document.getElementById("kraDescription").value = "";
            });

            // Handle form submission
            generateKRAButton.addEventListener("click", async function () {
                const kraName = document.getElementById("kraName").value.trim();
                const quarter = document.getElementById("quarter").value;
                const keepTarget = document.querySelector("input[name='KeepTarget']:checked").value;
                const kraDescriptions = kraDescriptionsInput.value;

                if (!kraName || !quarter || !kraDescriptions) {
                    alert("Please fill in all required fields.");
                    return;
                }

                const data = {
                    KraName: kraName, // string
                    Quarter: parseInt(quarter), // int
                    KeepTarget: keepTarget === "true" ? 1 : 0, // int (1 for true, 0 for false)
                    KraDescriptions: JSON.parse(kraDescriptions) // List<string>
                };

                $.ajax({
                    url: '/KRA/GenerateKRA',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function (response) {

                        alert(result.message);
                        document.getElementById("kraForm").reset();
                        descriptionTable.innerHTML = "";
                        kraDescriptionsInput.value = "";
                    },
                    error: function (xhr, status, error) {
                        alert(result.message || "Failed to generate KRA.");
                    }
                });


                //try {
                //    const response = await fetch("/api/KRA/GenerateKRA", {
                //        method: "POST",
                //        headers: {
                //            "Content-Type": "application/json"
                //        },
                //        body: JSON.stringify(data)
                //    });

                //    const result = await response.json();

                //    if (response.ok) {
                //        alert(result.message);
                //        document.getElementById("kraForm").reset();
                //        descriptionTable.innerHTML = "";
                //        kraDescriptionsInput.value = "";
                //    } else {
                //        alert(result.message || "Failed to generate KRA.");
                //    }
                //} catch (error) {
                //    console.error("Error submitting form:", error);
                //    alert("An error occurred while generating KRA.");
                //}
            });
        });
    </script>

</body>